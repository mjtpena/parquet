@page "/query"
@page "/query/{FileId:guid}"
@inject IFileProcessor FileProcessor
@inject ApplicationState AppState
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar

<PageTitle>Query Engine - Parquet & Delta Lake Tool</PageTitle>

<MudGrid>
    <!-- File Selection and Controls -->
    <MudItem xs="12">
        <MudPaper Class="pa-4" Elevation="2">
            <MudGrid AlignItems="Center.Center">
                <MudItem xs="12" md="6">
                    <MudSelect T="Guid?" @bind-Value="_selectedFileId" Label="Select File" Variant="Variant.Outlined" Margin="Margin.Dense">
                        @foreach (var file in _availableFiles)
                        {
                            <MudSelectItem Value="file.FileId">
                                <MudStack Row="true" AlignItems="AlignItems.Center">
                                    <MudIcon Icon="@GetFileIcon(file.Format)" Size="Size.Small" />
                                    <MudText>@file.FileName</MudText>
                                    <MudChip Size="Size.Small" Color="@GetFormatColor(file.Format)" Variant="Variant.Text">
                                        @file.Format
                                    </MudChip>
                                </MudStack>
                            </MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudButtonGroup Variant="Variant.Outlined" Size="Size.Small">
                        <MudButton StartIcon="Icons.Material.Filled.PlayArrow" 
                                  OnClick="ExecuteQuery" 
                                  Disabled="@(_isExecuting || string.IsNullOrWhiteSpace(_sqlQuery))"
                                  Color="Color.Primary">
                            @(_isExecuting ? "Executing..." : "Run Query")
                        </MudButton>
                        <MudButton StartIcon="Icons.Material.Filled.CheckCircle" OnClick="ValidateQuery">
                            Validate
                        </MudButton>
                        <MudButton StartIcon="Icons.Material.Filled.Explain" OnClick="ExplainQuery" Disabled="@(_selectedFileId == null)">
                            Explain
                        </MudButton>
                        <MudButton StartIcon="Icons.Material.Filled.History" OnClick="ToggleHistory">
                            History
                        </MudButton>
                    </MudButtonGroup>
                </MudItem>
            </MudGrid>
        </MudPaper>
    </MudItem>

    <!-- Query History Sidebar -->
    @if (_showHistory)
    {
        <MudItem xs="12" lg="3">
            <MudPaper Class="pa-4" Elevation="1" Style="height: 400px; overflow-y: auto;">
                <MudText Typo="Typo.h6" GutterBottom="true">Query History</MudText>
                @if (_queryHistory.Any())
                {
                    <MudList Clickable="true" Dense="true">
                        @foreach (var query in _queryHistory.OrderByDescending(q => q.ExecutedAt).Take(20))
                        {
                            <MudListItem OnClick="() => LoadHistoryQuery(query)">
                                <div style="width: 100%;">
                                    <MudText Typo="Typo.body2" Style="font-family: monospace; font-size: 0.75rem; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">
                                        @(query.QueryText.Length > 50 ? query.QueryText[..47] + "..." : query.QueryText)
                                    </MudText>
                                    <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                                        <MudText Typo="Typo.caption" Color="Color.Secondary">
                                            @query.ExecutedAt.ToString("HH:mm:ss")
                                        </MudText>
                                        <MudText Typo="Typo.caption" Color="Color.Secondary">
                                            @query.ReturnedRows rows
                                        </MudText>
                                    </MudStack>
                                </div>
                            </MudListItem>
                        }
                    </MudList>
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Secondary">No queries executed yet</MudText>
                }
            </MudPaper>
        </MudItem>
    }

    <!-- SQL Editor and Results -->
    <MudItem xs="12" lg="@(_showHistory ? 9 : 12)">
        <MudStack Spacing="4">
            <!-- SQL Editor -->
            <MudPaper Class="pa-4" Elevation="1">
                <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween" Class="mb-2">
                    <MudText Typo="Typo.h6">SQL Query</MudText>
                    <MudButtonGroup Size="Size.Small" Variant="Variant.Text">
                        <MudButton StartIcon="Icons.Material.Filled.ContentPaste" OnClick="LoadSampleQuery">Sample</MudButton>
                        <MudButton StartIcon="Icons.Material.Filled.Clear" OnClick="ClearQuery">Clear</MudButton>
                        <MudButton StartIcon="Icons.Material.Filled.FormatAlignLeft" OnClick="FormatQuery">Format</MudButton>
                    </MudButtonGroup>
                </MudStack>
                
                <div id="sql-editor" style="height: 200px; border: 1px solid #ddd; border-radius: 4px;">
                    <MudTextField T="string" 
                                 @bind-Value="_sqlQuery" 
                                 Variant="Variant.Outlined" 
                                 Lines="8"
                                 Style="font-family: 'Cascadia Code', 'Courier New', monospace;"
                                 Placeholder="SELECT * FROM data LIMIT 100;" />
                </div>
                
                <!-- Validation Results -->
                @if (_validationResult != null)
                {
                    <MudAlert Severity="@(_validationResult.IsValid ? Severity.Success : Severity.Error)" Class="mt-2">
                        @if (_validationResult.IsValid)
                        {
                            <MudText>✅ Query is valid</MudText>
                        }
                        else
                        {
                            <MudText>❌ Query validation failed:</MudText>
                            @foreach (var error in _validationResult.Errors)
                            {
                                <MudText Typo="Typo.body2">• @error</MudText>
                            }
                        }
                        @if (_validationResult.Warnings.Any())
                        {
                            <MudText Typo="Typo.body2" Class="mt-2">⚠️ Warnings:</MudText>
                            @foreach (var warning in _validationResult.Warnings)
                            {
                                <MudText Typo="Typo.body2">• @warning</MudText>
                            }
                        }
                    </MudAlert>
                }
            </MudPaper>

            <!-- Query Results -->
            <MudPaper Class="pa-4" Elevation="1">
                @if (_isExecuting)
                {
                    <MudStack AlignItems="AlignItems.Center" Class="pa-8">
                        <MudProgressCircular Indeterminate="true" Size="Size.Large" />
                        <MudText Typo="Typo.h6">Executing query...</MudText>
                        <MudText Typo="Typo.body2" Color="Color.Secondary">
                            This may take a few moments for large datasets
                        </MudText>
                    </MudStack>
                }
                else if (_queryResult != null)
                {
                    <MudStack>
                        <!-- Results Header -->
                        <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                            <MudText Typo="Typo.h6">Query Results</MudText>
                            <MudStack Row="true" AlignItems="AlignItems.Center">
                                <MudChip Icon="Icons.Material.Filled.TableRows" Color="Color.Info" Size="Size.Small">
                                    @_queryResult.ReturnedRows rows
                                </MudChip>
                                <MudChip Icon="Icons.Material.Filled.AccessTime" Color="Color.Secondary" Size="Size.Small">
                                    @(_queryResult.ExecutionTime.TotalMilliseconds.ToString("F0"))ms
                                </MudChip>
                                <MudChip Icon="Icons.Material.Filled.Memory" Color="Color.Secondary" Size="Size.Small">
                                    @FormatBytes(_queryResult.BytesScanned) scanned
                                </MudChip>
                                <MudButton StartIcon="Icons.Material.Filled.Download" Size="Size.Small" OnClick="ExportResults">
                                    Export
                                </MudButton>
                            </MudStack>
                        </MudStack>

                        <!-- Results Table -->
                        <div style="height: 400px; overflow: auto;">
                            <MudTable Items="@_queryResult.Rows" 
                                     Dense="true" 
                                     Hover="true" 
                                     Striped="true"
                                     FixedHeader="true"
                                     Height="400px">
                                <HeaderContent>
                                    @foreach (var column in _queryResult.Columns)
                                    {
                                        <MudTh>
                                            <MudStack>
                                                <MudText Typo="Typo.body2" Style="font-weight: 600;">@column.Name</MudText>
                                                <MudText Typo="Typo.caption" Color="Color.Secondary">@column.DataType</MudText>
                                            </MudStack>
                                        </MudTh>
                                    }
                                </HeaderContent>
                                <RowTemplate>
                                    @foreach (var column in _queryResult.Columns)
                                    {
                                        <MudTd DataLabel="@column.Name">
                                            @RenderCellValue(context, column.Name)
                                        </MudTd>
                                    }
                                </RowTemplate>
                            </MudTable>
                        </div>
                    </MudStack>
                }
                else
                {
                    <MudStack AlignItems="AlignItems.Center" Class="pa-8">
                        <MudIcon Icon="Icons.Material.Filled.Search" Size="Size.Large" Color="Color.Secondary" />
                        <MudText Typo="Typo.h5" Color="Color.Secondary">Ready to run your query</MudText>
                        <MudText Typo="Typo.body2" Color="Color.Secondary">
                            Enter a SQL query above and click "Run Query" to see results
                        </MudText>
                    </MudStack>
                }
            </MudPaper>
        </MudStack>
    </MudItem>
</MudGrid>

<!-- Query Templates Dialog -->
<MudDialog @bind-IsVisible="_showTemplatesDialog" Options="_dialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="Icons.Material.Filled.Code" Class="mr-2" />
            Query Templates
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudList Clickable="true">
            @foreach (var template in _queryTemplates)
            {
                <MudListItem OnClick="() => LoadTemplate(template)">
                    <div style="width: 100%;">
                        <MudText Typo="Typo.subtitle2">@template.Name</MudText>
                        <MudText Typo="Typo.body2" Color="Color.Secondary">@template.Description</MudText>
                        <MudText Typo="Typo.caption" Style="font-family: monospace;">@template.Query</MudText>
                    </div>
                </MudListItem>
            }
        </MudList>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="() => _showTemplatesDialog = false">Close</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [Parameter] public Guid? FileId { get; set; }

    private List<FileMetadata> _availableFiles = new();
    private Guid? _selectedFileId;
    private string _sqlQuery = "SELECT * FROM data LIMIT 100;";
    
    private bool _isExecuting = false;
    private bool _showHistory = false;
    private bool _showTemplatesDialog = false;
    
    private QueryResult? _queryResult;
    private ValidationResult? _validationResult;
    private List<QueryResult> _queryHistory = new();
    
    private readonly DialogOptions _dialogOptions = new() 
    { 
        MaxWidth = MaxWidth.Large, 
        FullWidth = true 
    };

    private readonly List<QueryTemplate> _queryTemplates = new()
    {
        new("Basic Select", "Select all columns with limit", "SELECT * FROM data LIMIT 100;"),
        new("Count Rows", "Count total rows in dataset", "SELECT COUNT(*) as total_rows FROM data;"),
        new("Column Stats", "Get basic statistics for numeric columns", "SELECT \n  COUNT(*) as row_count,\n  AVG(value) as avg_value,\n  MIN(value) as min_value,\n  MAX(value) as max_value\nFROM data;"),
        new("Group By", "Group data by a column", "SELECT \n  column_name,\n  COUNT(*) as count\nFROM data \nGROUP BY column_name\nORDER BY count DESC\nLIMIT 10;"),
        new("Filter Data", "Filter data with WHERE clause", "SELECT * \nFROM data \nWHERE column_name IS NOT NULL\n  AND another_column > 0\nLIMIT 100;"),
        new("Date Range", "Filter by date range", "SELECT * \nFROM data \nWHERE date_column >= '2024-01-01'\n  AND date_column < '2024-12-31'\nORDER BY date_column DESC\nLIMIT 100;")
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadAvailableFiles();
        await LoadQueryHistory();
        
        if (FileId.HasValue)
        {
            _selectedFileId = FileId.Value;
        }
        else if (AppState.ActiveFile != null)
        {
            _selectedFileId = AppState.ActiveFile.Metadata.FileId;
        }
    }

    private async Task LoadAvailableFiles()
    {
        try
        {
            _availableFiles = await StorageService.GetRecentFilesAsync();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to load files: {ex.Message}", Severity.Error);
        }
    }

    private async Task LoadQueryHistory()
    {
        try
        {
            _queryHistory = await QueryEngine.GetQueryHistoryAsync(_selectedFileId);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to load query history: {ex.Message}", Severity.Error);
        }
    }

    private async Task ExecuteQuery()
    {
        if (string.IsNullOrWhiteSpace(_sqlQuery) || _selectedFileId == null)
        {
            Snackbar.Add("Please select a file and enter a query", Severity.Warning);
            return;
        }

        _isExecuting = true;
        _queryResult = null;
        StateHasChanged();

        try
        {
            var options = new QueryOptions
            {
                FileId = _selectedFileId,
                MaxRows = 1000,
                TimeoutSeconds = 30
            };

            _queryResult = await QueryEngine.ExecuteQueryAsync(_sqlQuery, options);
            await LoadQueryHistory(); // Refresh history
            
            Snackbar.Add($"Query executed successfully - {_queryResult.ReturnedRows} rows returned", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Query execution failed: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isExecuting = false;
            StateHasChanged();
        }
    }

    private async Task ValidateQuery()
    {
        if (string.IsNullOrWhiteSpace(_sqlQuery))
        {
            Snackbar.Add("Please enter a query to validate", Severity.Warning);
            return;
        }

        try
        {
            _validationResult = await QueryEngine.ValidateQueryAsync(_sqlQuery);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Validation failed: {ex.Message}", Severity.Error);
        }
    }

    private async Task ExplainQuery()
    {
        // TODO: Implement query plan explanation
        Snackbar.Add("Query explanation coming soon!", Severity.Info);
    }

    private void ToggleHistory()
    {
        _showHistory = !_showHistory;
    }

    private void LoadHistoryQuery(QueryResult query)
    {
        _sqlQuery = query.QueryText;
        _validationResult = null;
        StateHasChanged();
    }

    private void LoadSampleQuery()
    {
        _showTemplatesDialog = true;
    }

    private void LoadTemplate(QueryTemplate template)
    {
        _sqlQuery = template.Query;
        _validationResult = null;
        _showTemplatesDialog = false;
        StateHasChanged();
    }

    private void ClearQuery()
    {
        _sqlQuery = "";
        _validationResult = null;
        _queryResult = null;
        StateHasChanged();
    }

    private void FormatQuery()
    {
        // Simple query formatting
        if (!string.IsNullOrWhiteSpace(_sqlQuery))
        {
            _sqlQuery = _sqlQuery
                .Replace("SELECT", "SELECT\n  ")
                .Replace("FROM", "\nFROM")
                .Replace("WHERE", "\nWHERE")
                .Replace("GROUP BY", "\nGROUP BY")
                .Replace("ORDER BY", "\nORDER BY")
                .Replace("LIMIT", "\nLIMIT");
            StateHasChanged();
        }
    }

    private async Task ExportResults()
    {
        // TODO: Implement results export
        Snackbar.Add("Export functionality coming soon!", Severity.Info);
    }

    private MarkupString RenderCellValue(Dictionary<string, object?> row, string columnName)
    {
        if (!row.TryGetValue(columnName, out var value) || value == null)
        {
            return new MarkupString("<span style='color: #ccc; font-style: italic;'>NULL</span>");
        }

        var stringValue = value.ToString();
        
        if (stringValue?.Length > 100)
        {
            stringValue = stringValue[..97] + "...";
        }

        return new MarkupString(System.Web.HttpUtility.HtmlEncode(stringValue));
    }

    private string GetFileIcon(FileFormat format)
    {
        return format switch
        {
            FileFormat.Parquet => Icons.Material.Filled.TableChart,
            FileFormat.Delta => Icons.Material.Filled.ChangeHistory,
            FileFormat.CSV => Icons.Material.Filled.GridOn,
            FileFormat.JSON => Icons.Material.Filled.DataObject,
            _ => Icons.Material.Filled.InsertDriveFile
        };
    }

    private Color GetFormatColor(FileFormat format)
    {
        return format switch
        {
            FileFormat.Parquet => Color.Primary,
            FileFormat.Delta => Color.Success,
            FileFormat.CSV => Color.Info,
            FileFormat.JSON => Color.Warning,
            _ => Color.Default
        };
    }

    private string FormatBytes(long bytes)
    {
        string[] suffixes = { "B", "KB", "MB", "GB", "TB" };
        int counter = 0;
        double number = bytes;
        
        while (Math.Round(number / 1024) >= 1)
        {
            number = number / 1024;
            counter++;
        }
        
        return $"{number:n1} {suffixes[counter]}";
    }

    private record QueryTemplate(string Name, string Description, string Query);
}