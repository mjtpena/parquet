@page "/viewer"
@page "/viewer/{FileId:guid}"
@inject IFileProcessor FileProcessor
@inject IStorageService StorageService
@inject ApplicationState AppState
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar

<PageTitle>Data Viewer - Parquet & Delta Lake Tool</PageTitle>

<MudGrid>
    <MudItem xs="12">
        <MudPaper Class="pa-4" Elevation="2">
            <MudGrid AlignItems="Center.Center">
                <MudItem xs="12" md="4">
                    <MudSelect T="Guid?" @bind-Value="_selectedFileId" Label="Select File" Variant="Variant.Outlined" Margin="Margin.Dense">
                        @foreach (var file in _availableFiles)
                        {
                            <MudSelectItem Value="file.FileId">
                                <MudStack Row="true" AlignItems="AlignItems.Center">
                                    <MudIcon Icon="@GetFileIcon(file.Format)" Size="Size.Small" />
                                    <MudText>@file.FileName</MudText>
                                    <MudChip Size="Size.Small" Color="@GetFormatColor(file.Format)" Variant="Variant.Text">
                                        @file.Format
                                    </MudChip>
                                </MudStack>
                            </MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" md="8">
                    <MudButtonGroup Variant="Variant.Outlined" Size="Size.Small">
                        <MudButton StartIcon="Icons.Material.Filled.Refresh" OnClick="RefreshData" Disabled="@_isLoading">
                            Refresh
                        </MudButton>
                        <MudButton StartIcon="Icons.Material.Filled.FilterList" OnClick="ToggleFilterPanel">
                            Filters (@_activeFilters.Count)
                        </MudButton>
                        <MudButton StartIcon="Icons.Material.Filled.ViewColumn" OnClick="ToggleColumnPanel">
                            Columns
                        </MudButton>
                        <MudButton StartIcon="Icons.Material.Filled.Download" OnClick="ExportData" Disabled="@(_currentData == null)">
                            Export
                        </MudButton>
                    </MudButtonGroup>
                </MudItem>
            </MudGrid>
        </MudPaper>
    </MudItem>

    @if (_showFilters)
    {
        <MudItem xs="12">
            <MudCollapse Expanded="@_showFilters">
                <MudPaper Class="pa-4" Elevation="1">
                    <MudText Typo="Typo.h6" GutterBottom="true">Filters</MudText>
                    <MudGrid>
                        @for (int i = 0; i < _activeFilters.Count; i++)
                        {
                            var filter = _activeFilters[i];
                            var index = i; // Capture for closure
                            <MudItem xs="12" md="6" lg="4">
                                <MudPaper Class="pa-3" Elevation="0" Style="border: 1px solid #e0e0e0;">
                                    <MudGrid AlignItems="AlignItems.Center">
                                        <MudItem xs="3">
                                            <MudSelect T="string" @bind-Value="filter.Column" Label="Column" Variant="Variant.Outlined" Dense="true">
                                                @if (_currentData?.Schema?.Fields != null)
                                                {
                                                    @foreach (var field in _currentData.Schema.Fields)
                                                    {
                                                        <MudSelectItem Value="field.Name">@field.Name</MudSelectItem>
                                                    }
                                                }
                                            </MudSelect>
                                        </MudItem>
                                        <MudItem xs="3">
                                            <MudSelect T="FilterOperator" @bind-Value="filter.Operator" Label="Operator" Variant="Variant.Outlined" Dense="true">
                                                @foreach (var op in Enum.GetValues<FilterOperator>())
                                                {
                                                    <MudSelectItem Value="op">@op.ToString()</MudSelectItem>
                                                }
                                            </MudSelect>
                                        </MudItem>
                                        <MudItem xs="4">
                                            <MudTextField T="string" @bind-Value="_filterValues[index]" Label="Value" Variant="Variant.Outlined" Dense="true" />
                                        </MudItem>
                                        <MudItem xs="2">
                                            <MudIconButton Icon="Icons.Material.Filled.Delete" Size="Size.Small" OnClick="() => RemoveFilter(index)" />
                                        </MudItem>
                                    </MudGrid>
                                </MudPaper>
                            </MudItem>
                        }
                        <MudItem xs="12">
                            <MudButton StartIcon="Icons.Material.Filled.Add" OnClick="AddFilter" Variant="Variant.Outlined">
                                Add Filter
                            </MudButton>
                            <MudButton StartIcon="Icons.Material.Filled.PlayArrow" OnClick="ApplyFilters" Variant="Variant.Filled" Color="Color.Primary" Class="ml-2">
                                Apply Filters
                            </MudButton>
                        </MudItem>
                    </MudGrid>
                </MudPaper>
            </MudCollapse>
        </MudItem>
    }

    <MudItem xs="12">
        <MudPaper Class="pa-4" Elevation="1">
            @if (_isLoading)
            {
                <MudStack AlignItems="AlignItems.Center" Class="pa-8">
                    <MudProgressCircular Indeterminate="true" Size="Size.Large" />
                    <MudText Typo="Typo.h6">Loading data...</MudText>
                </MudStack>
            }
            else if (_currentData == null)
            {
                <MudStack AlignItems="AlignItems.Center" Class="pa-8">
                    <MudIcon Icon="Icons.Material.Filled.TableChart" Size="Size.Large" Color="Color.Secondary" />
                    <MudText Typo="Typo.h5" Color="Color.Secondary">Select a file to view data</MudText>
                    <MudText Typo="Typo.body2" Color="Color.Secondary">
                        Choose a file from the dropdown above to start exploring your data
                    </MudText>
                </MudStack>
            }
            else
            {
                <MudStack>
                    <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                        <MudText Typo="Typo.h6">
                            Data Preview - @_selectedFileName
                        </MudText>
                        <MudStack Row="true" AlignItems="AlignItems.Center">
                            <MudText Typo="Typo.body2" Color="Color.Secondary">
                                Showing @_currentData.ReturnedRows of @_currentData.TotalRows rows
                            </MudText>
                            <MudPagination Count="@_totalPages" @bind-Selected="_currentPage" ShowFirstButton="true" ShowLastButton="true" />
                        </MudStack>
                    </MudStack>

                    <div style="height: 600px; overflow: auto;">
                        <MudTable Items="@_displayedRows" 
                                 Dense="true" 
                                 Hover="true" 
                                 Striped="true"
                                 FixedHeader="true"
                                 Height="600px">
                            <HeaderContent>
                                @if (_currentData.Schema?.Fields != null)
                                {
                                    @foreach (var field in _currentData.Schema.Fields.Where(f => _visibleColumns.Contains(f.Name)))
                                    {
                                        <MudTh>
                                            <MudStack>
                                                <MudText Typo="Typo.body2" Style="font-weight: 600;">@field.Name</MudText>
                                                <MudText Typo="Typo.caption" Color="Color.Secondary">@field.DataType</MudText>
                                            </MudStack>
                                        </MudTh>
                                    }
                                }
                            </HeaderContent>
                            <RowTemplate>
                                @if (_currentData.Schema?.Fields != null)
                                {
                                    @foreach (var field in _currentData.Schema.Fields.Where(f => _visibleColumns.Contains(f.Name)))
                                    {
                                        <MudTd DataLabel="@field.Name">
                                            @RenderCellValue(context, field.Name)
                                        </MudTd>
                                    }
                                }
                            </RowTemplate>
                        </MudTable>
                    </div>
                </MudStack>
            }
        </MudPaper>
    </MudItem>
</MudGrid>

@* Column Selector Dialog *@
<MudDialog @bind-IsVisible="_showColumnDialog" Options="_dialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="Icons.Material.Filled.ViewColumn" Class="mr-2" />
            Column Visibility
        </MudText>
    </TitleContent>
    <DialogContent>
        @if (_currentData?.Schema?.Fields != null)
        {
            <MudList Clickable="true">
                @foreach (var field in _currentData.Schema.Fields)
                {
                    <MudListItem>
                        <MudCheckBox @bind-Checked="@_columnVisibility[field.Name]" 
                                    Label="@field.Name"
                                    Color="Color.Primary" />
                        <MudText Typo="Typo.caption" Color="Color.Secondary" Class="ml-4">
                            @field.DataType
                        </MudText>
                    </MudListItem>
                }
            </MudList>
        }
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="SelectAllColumns" Variant="Variant.Text">Select All</MudButton>
        <MudButton OnClick="SelectNoColumns" Variant="Variant.Text">Select None</MudButton>
        <MudSpacer />
        <MudButton OnClick="CancelColumnSelection" Variant="Variant.Text">Cancel</MudButton>
        <MudButton OnClick="ApplyColumnSelection" Variant="Variant.Filled" Color="Color.Primary">Apply</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [Parameter] public Guid? FileId { get; set; }

    private List<FileMetadata> _availableFiles = new();
    private Guid? _selectedFileId;
    private DataPreview? _currentData;
    private bool _isLoading = false;
    private string _selectedFileName = "";
    
    // Pagination
    private int _currentPage = 1;
    private int _pageSize = 50;
    private int _totalPages = 1;
    private List<Dictionary<string, object?>> _displayedRows = new();
    
    // Filtering
    private bool _showFilters = false;
    private List<Filter> _activeFilters = new();
    private List<string> _filterValues = new();
    
    // Columns
    private bool _showColumnDialog = false;
    private Dictionary<string, bool> _columnVisibility = new();
    private List<string> _visibleColumns = new();
    
    private readonly DialogOptions _dialogOptions = new() 
    { 
        MaxWidth = MaxWidth.Medium, 
        FullWidth = true 
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadAvailableFiles();
        
        if (FileId.HasValue)
        {
            _selectedFileId = FileId.Value;
            await LoadFileData();
        }
        else if (AppState.ActiveFile != null)
        {
            _selectedFileId = AppState.ActiveFile.Metadata.FileId;
            await LoadFileData();
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (FileId.HasValue && FileId != _selectedFileId)
        {
            _selectedFileId = FileId.Value;
            await LoadFileData();
        }
    }

    private async Task LoadAvailableFiles()
    {
        try
        {
            _availableFiles = await StorageService.GetRecentFilesAsync();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to load files: {ex.Message}", Severity.Error);
        }
    }

    private async Task LoadFileData()
    {
        if (_selectedFileId == null) return;

        _isLoading = true;
        StateHasChanged();

        try
        {
            var metadata = await StorageService.GetMetadataAsync(_selectedFileId.Value);
            if (metadata != null)
            {
                _selectedFileName = metadata.FileName;
                _currentData = await FileProcessor.GetPreviewAsync(_selectedFileId.Value, _pageSize * 10, 0);
                
                // Initialize column visibility
                if (_currentData.Schema?.Fields != null)
                {
                    _columnVisibility.Clear();
                    _visibleColumns.Clear();
                    
                    foreach (var field in _currentData.Schema.Fields)
                    {
                        _columnVisibility[field.Name] = true;
                        _visibleColumns.Add(field.Name);
                    }
                }
                
                UpdateDisplayedRows();
                UpdatePagination();
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to load file data: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    private void UpdateDisplayedRows()
    {
        if (_currentData?.Rows != null)
        {
            var skip = (_currentPage - 1) * _pageSize;
            _displayedRows = _currentData.Rows.Skip(skip).Take(_pageSize).ToList();
        }
    }

    private void UpdatePagination()
    {
        if (_currentData != null)
        {
            _totalPages = (int)Math.Ceiling(_currentData.TotalRows / (double)_pageSize);
        }
    }

    private async Task RefreshData()
    {
        await LoadFileData();
    }

    private void ToggleFilterPanel()
    {
        _showFilters = !_showFilters;
    }

    private void ToggleColumnPanel()
    {
        _showColumnDialog = true;
    }

    private void AddFilter()
    {
        _activeFilters.Add(new Filter());
        _filterValues.Add("");
    }

    private void RemoveFilter(int index)
    {
        if (index >= 0 && index < _activeFilters.Count)
        {
            _activeFilters.RemoveAt(index);
            _filterValues.RemoveAt(index);
        }
    }

    private async Task ApplyFilters()
    {
        // TODO: Implement actual filtering logic
        Snackbar.Add("Filters applied (mock implementation)", Severity.Info);
        await LoadFileData();
    }

    private void SelectAllColumns()
    {
        foreach (var key in _columnVisibility.Keys.ToList())
        {
            _columnVisibility[key] = true;
        }
    }

    private void SelectNoColumns()
    {
        foreach (var key in _columnVisibility.Keys.ToList())
        {
            _columnVisibility[key] = false;
        }
    }

    private void CancelColumnSelection()
    {
        _showColumnDialog = false;
    }

    private void ApplyColumnSelection()
    {
        _visibleColumns.Clear();
        foreach (var kvp in _columnVisibility.Where(x => x.Value))
        {
            _visibleColumns.Add(kvp.Key);
        }
        _showColumnDialog = false;
    }

    private async Task ExportData()
    {
        // TODO: Implement export functionality
        Snackbar.Add("Export functionality coming soon!", Severity.Info);
    }

    private MarkupString RenderCellValue(Dictionary<string, object?> row, string columnName)
    {
        if (!row.TryGetValue(columnName, out var value) || value == null)
        {
            return new MarkupString("<span style='color: #ccc; font-style: italic;'>NULL</span>");
        }

        var stringValue = value.ToString();
        
        // Truncate long values
        if (stringValue?.Length > 100)
        {
            stringValue = stringValue[..97] + "...";
        }

        return new MarkupString(System.Web.HttpUtility.HtmlEncode(stringValue));
    }

    private string GetFileIcon(FileFormat format)
    {
        return format switch
        {
            FileFormat.Parquet => Icons.Material.Filled.TableChart,
            FileFormat.Delta => Icons.Material.Filled.ChangeHistory,
            FileFormat.CSV => Icons.Material.Filled.GridOn,
            FileFormat.JSON => Icons.Material.Filled.DataObject,
            _ => Icons.Material.Filled.InsertDriveFile
        };
    }

    private Color GetFormatColor(FileFormat format)
    {
        return format switch
        {
            FileFormat.Parquet => Color.Primary,
            FileFormat.Delta => Color.Success,
            FileFormat.CSV => Color.Info,
            FileFormat.JSON => Color.Warning,
            _ => Color.Default
        };
    }
}