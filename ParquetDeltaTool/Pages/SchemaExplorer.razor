@page "/schema"
@page "/schema/{FileId:guid}"
@inject IFileProcessor FileProcessor
@inject IStorageService StorageService
@inject ApplicationState AppState
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar

<PageTitle>Schema Explorer - Parquet & Delta Lake Tool</PageTitle>

<MudGrid>
    <!-- File Selection and Controls -->
    <MudItem xs="12">
        <MudPaper Class="pa-4" Elevation="2">
            <MudGrid AlignItems="Center.Center">
                <MudItem xs="12" md="6">
                    <MudSelect T="Guid?" @bind-Value="_selectedFileId" Label="Select File" Variant="Variant.Outlined" Margin="Margin.Dense">
                        @foreach (var file in _availableFiles)
                        {
                            <MudSelectItem Value="file.FileId">
                                <MudStack Row="true" AlignItems="AlignItems.Center">
                                    <MudIcon Icon="@GetFileIcon(file.Format)" Size="Size.Small" />
                                    <MudText>@file.FileName</MudText>
                                    <MudChip Size="Size.Small" Color="@GetFormatColor(file.Format)" Variant="Variant.Text">
                                        @file.Format
                                    </MudChip>
                                </MudStack>
                            </MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudButtonGroup Variant="Variant.Outlined" Size="Size.Small">
                        <MudButton StartIcon="Icons.Material.Filled.Refresh" OnClick="RefreshSchema" Disabled="@_isLoading">
                            Refresh
                        </MudButton>
                        <MudButton StartIcon="@(_showAsTree ? Icons.Material.Filled.ViewList : Icons.Material.Filled.AccountTree)" 
                                  OnClick="ToggleView">
                            @(_showAsTree ? "Table View" : "Tree View")
                        </MudButton>
                        <MudButton StartIcon="Icons.Material.Filled.Download" OnClick="ExportSchema" Disabled="@(_currentSchema == null)">
                            Export Schema
                        </MudButton>
                        <MudButton StartIcon="Icons.Material.Filled.Code" OnClick="GenerateCode" Disabled="@(_currentSchema == null)">
                            Generate Code
                        </MudButton>
                    </MudButtonGroup>
                </MudItem>
            </MudGrid>
        </MudPaper>
    </MudItem>

    <MudItem xs="12">
        <MudGrid>
            <!-- Schema Visualization -->
            <MudItem xs="12" lg="8">
                <MudPaper Class="pa-4" Elevation="1">
                    @if (_isLoading)
                    {
                        <MudStack AlignItems="AlignItems.Center" Class="pa-8">
                            <MudProgressCircular Indeterminate="true" Size="Size.Large" />
                            <MudText Typo="Typo.h6">Loading schema...</MudText>
                        </MudStack>
                    }
                    else if (_currentSchema == null)
                    {
                        <MudStack AlignItems="AlignItems.Center" Class="pa-8">
                            <MudIcon Icon="Icons.Material.Filled.Schema" Size="Size.Large" Color="Color.Secondary" />
                            <MudText Typo="Typo.h5" Color="Color.Secondary">Select a file to explore schema</MudText>
                            <MudText Typo="Typo.body2" Color="Color.Secondary">
                                Choose a file from the dropdown above to view its schema structure
                            </MudText>
                        </MudStack>
                    }
                    else
                    {
                        <MudStack>
                            <MudText Typo="Typo.h5" GutterBottom="true">
                                Schema: @(_currentSchema.Name ?? "Unnamed")
                            </MudText>

                            @if (_showAsTree)
                            {
                                <!-- Tree View -->
                                <div style="max-height: 600px; overflow-y: auto;">
                                    <MudTreeView Items="@_treeItems" MultiSelection="false" CanActivate="true" CanSelect="true">
                                        <ItemTemplate Context="item">
                                            <MudTreeViewItem @bind-Expanded="@item.IsExpanded" 
                                                           Items="@item.TreeItems" 
                                                           Text="@item.Text"
                                                           Icon="@item.Icon"
                                                           IconColor="@item.IconColor"
                                                           OnClick="@(() => SelectField(item.Field))" />
                                        </ItemTemplate>
                                    </MudTreeView>
                                </div>
                            }
                            else
                            {
                                <!-- Table View -->
                                <div style="max-height: 600px; overflow-y: auto;">
                                    <MudTable Items="@_flatFields" Dense="true" Hover="true" Striped="true" FixedHeader="true">
                                        <HeaderContent>
                                            <MudTh>Field Name</MudTh>
                                            <MudTh>Data Type</MudTh>
                                            <MudTh>Nullable</MudTh>
                                            <MudTh>Level</MudTh>
                                            <MudTh>Actions</MudTh>
                                        </HeaderContent>
                                        <RowTemplate>
                                            <MudTd DataLabel="Field Name">
                                                <MudStack Row="true" AlignItems="AlignItems.Center">
                                                    <div style="width: @(context.Level * 20)px;"></div>
                                                    <MudIcon Icon="@GetFieldIcon(context.Field)" Size="Size.Small" Color="@GetFieldColor(context.Field)" />
                                                    <MudText Style="@($"font-weight: {(context.Level == 0 ? "600" : "400")};")">
                                                        @context.Field.Name
                                                    </MudText>
                                                </MudStack>
                                            </MudTd>
                                            <MudTd DataLabel="Data Type">
                                                <MudChip Size="Size.Small" Color="@GetTypeColor(context.Field.DataType)" Variant="Variant.Text">
                                                    @context.Field.DataType
                                                </MudChip>
                                            </MudTd>
                                            <MudTd DataLabel="Nullable">
                                                <MudIcon Icon="@(context.Field.IsNullable ? Icons.Material.Filled.CheckBox : Icons.Material.Filled.CheckBoxOutlineBlank)" 
                                                        Color="@(context.Field.IsNullable ? Color.Success : Color.Error)" Size="Size.Small" />
                                            </MudTd>
                                            <MudTd DataLabel="Level">@context.Level</MudTd>
                                            <MudTd DataLabel="Actions">
                                                <MudIconButton Icon="Icons.Material.Filled.Info" Size="Size.Small" OnClick="() => SelectField(context.Field)" />
                                            </MudTd>
                                        </RowTemplate>
                                    </MudTable>
                                </div>
                            }
                        </MudStack>
                    }
                </MudPaper>
            </MudItem>

            <!-- Field Details Panel -->
            <MudItem xs="12" lg="4">
                <MudPaper Class="pa-4" Elevation="1" Style="height: 600px; overflow-y: auto;">
                    @if (_selectedField != null)
                    {
                        <MudStack Spacing="4">
                            <MudText Typo="Typo.h6">Field Details</MudText>
                            
                            <MudStack Spacing="2">
                                <MudText Typo="Typo.subtitle1" Style="font-weight: 600;">@_selectedField.Name</MudText>
                                
                                <MudGrid>
                                    <MudItem xs="6">
                                        <MudText Typo="Typo.body2" Color="Color.Secondary">Data Type:</MudText>
                                        <MudChip Size="Size.Small" Color="@GetTypeColor(_selectedField.DataType)">
                                            @_selectedField.DataType
                                        </MudChip>
                                    </MudItem>
                                    <MudItem xs="6">
                                        <MudText Typo="Typo.body2" Color="Color.Secondary">Nullable:</MudText>
                                        <MudChip Size="Size.Small" Color="@(_selectedField.IsNullable ? Color.Warning : Color.Success)">
                                            @(_selectedField.IsNullable ? "Yes" : "No")
                                        </MudChip>
                                    </MudItem>
                                </MudGrid>

                                @if (_selectedField.DefaultValue != null)
                                {
                                    <div>
                                        <MudText Typo="Typo.body2" Color="Color.Secondary">Default Value:</MudText>
                                        <MudTextField T="string" Value="@_selectedField.DefaultValue?.ToString()" ReadOnly="true" Variant="Variant.Outlined" Margin="Margin.Dense" />
                                    </div>
                                }

                                @if (_selectedField.Metadata.Any())
                                {
                                    <div>
                                        <MudText Typo="Typo.body2" Color="Color.Secondary">Metadata:</MudText>
                                        <MudExpansionPanels>
                                            <MudExpansionPanel Text="View Metadata">
                                                @foreach (var meta in _selectedField.Metadata)
                                                {
                                                    <MudGrid AlignItems="AlignItems.Center">
                                                        <MudItem xs="4">
                                                            <MudText Typo="Typo.caption" Style="font-weight: 600;">@meta.Key:</MudText>
                                                        </MudItem>
                                                        <MudItem xs="8">
                                                            <MudText Typo="Typo.caption">@meta.Value</MudText>
                                                        </MudItem>
                                                    </MudGrid>
                                                }
                                            </MudExpansionPanel>
                                        </MudExpansionPanels>
                                    </div>
                                }

                                @if (_selectedField.Children.Any())
                                {
                                    <div>
                                        <MudText Typo="Typo.body2" Color="Color.Secondary">Child Fields:</MudText>
                                        <MudList Dense="true">
                                            @foreach (var child in _selectedField.Children)
                                            {
                                                <MudListItem OnClick="() => SelectField(child)">
                                                    <MudStack Row="true" AlignItems="AlignItems.Center">
                                                        <MudIcon Icon="@GetFieldIcon(child)" Size="Size.Small" Color="@GetFieldColor(child)" />
                                                        <MudText>@child.Name</MudText>
                                                        <MudChip Size="Size.Small" Color="@GetTypeColor(child.DataType)" Variant="Variant.Text">
                                                            @child.DataType
                                                        </MudChip>
                                                    </MudStack>
                                                </MudListItem>
                                            }
                                        </MudList>
                                    </div>
                                }
                            </MudStack>

                            <MudDivider />

                            <!-- Field Actions -->
                            <MudStack>
                                <MudText Typo="Typo.subtitle2">Quick Actions</MudText>
                                <MudButton StartIcon="Icons.Material.Filled.Search" 
                                          Variant="Variant.Outlined" 
                                          Size="Size.Small"
                                          OnClick="QueryField">
                                    Query This Field
                                </MudButton>
                                <MudButton StartIcon="Icons.Material.Filled.BarChart" 
                                          Variant="Variant.Outlined" 
                                          Size="Size.Small"
                                          OnClick="AnalyzeField">
                                    Analyze Field
                                </MudButton>
                                <MudButton StartIcon="Icons.Material.Filled.ContentCopy" 
                                          Variant="Variant.Outlined" 
                                          Size="Size.Small"
                                          OnClick="CopyFieldPath">
                                    Copy Field Path
                                </MudButton>
                            </MudStack>
                        </MudStack>
                    }
                    else
                    {
                        <MudStack AlignItems="AlignItems.Center" Class="pa-4">
                            <MudIcon Icon="Icons.Material.Filled.TouchApp" Size="Size.Large" Color="Color.Secondary" />
                            <MudText Typo="Typo.h6" Color="Color.Secondary">Select a field</MudText>
                            <MudText Typo="Typo.body2" Color="Color.Secondary">
                                Click on a field in the schema to see detailed information
                            </MudText>
                        </MudStack>
                    }
                </MudPaper>
            </MudItem>
        </MudGrid>
    </MudItem>
</MudGrid>

@code {
    [Parameter] public Guid? FileId { get; set; }

    private List<FileMetadata> _availableFiles = new();
    private Guid? _selectedFileId;
    private Schema? _currentSchema;
    private Field? _selectedField;
    private bool _isLoading = false;
    private bool _showAsTree = true;
    
    private HashSet<SchemaTreeItem> _treeItems = new();
    private List<FlatField> _flatFields = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadAvailableFiles();
        
        if (FileId.HasValue)
        {
            _selectedFileId = FileId.Value;
            await LoadSchema();
        }
        else if (AppState.ActiveFile != null)
        {
            _selectedFileId = AppState.ActiveFile.Metadata.FileId;
            await LoadSchema();
        }
    }

    private async Task LoadAvailableFiles()
    {
        try
        {
            _availableFiles = await StorageService.GetRecentFilesAsync();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to load files: {ex.Message}", Severity.Error);
        }
    }

    private async Task LoadSchema()
    {
        if (_selectedFileId == null) return;

        _isLoading = true;
        StateHasChanged();

        try
        {
            _currentSchema = await FileProcessor.GetSchemaAsync(_selectedFileId.Value);
            BuildTreeView();
            BuildTableView();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to load schema: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    private void BuildTreeView()
    {
        _treeItems.Clear();
        
        if (_currentSchema?.Fields != null)
        {
            foreach (var field in _currentSchema.Fields)
            {
                _treeItems.Add(CreateTreeItem(field, 0));
            }
        }
    }

    private SchemaTreeItem CreateTreeItem(Field field, int level)
    {
        var item = new SchemaTreeItem
        {
            Text = $"{field.Name} ({field.DataType})",
            Icon = GetFieldIcon(field),
            IconColor = GetFieldColor(field),
            Field = field,
            Level = level
        };

        if (field.Children.Any())
        {
            item.TreeItems = new HashSet<SchemaTreeItem>();
            foreach (var child in field.Children)
            {
                item.TreeItems.Add(CreateTreeItem(child, level + 1));
            }
        }

        return item;
    }

    private void BuildTableView()
    {
        _flatFields.Clear();
        
        if (_currentSchema?.Fields != null)
        {
            foreach (var field in _currentSchema.Fields)
            {
                FlattenField(field, 0);
            }
        }
    }

    private void FlattenField(Field field, int level)
    {
        _flatFields.Add(new FlatField { Field = field, Level = level });
        
        foreach (var child in field.Children)
        {
            FlattenField(child, level + 1);
        }
    }

    private async Task RefreshSchema()
    {
        await LoadSchema();
    }

    private void ToggleView()
    {
        _showAsTree = !_showAsTree;
    }

    private void SelectField(Field field)
    {
        _selectedField = field;
        StateHasChanged();
    }

    private async Task ExportSchema()
    {
        // TODO: Implement schema export
        Snackbar.Add("Schema export functionality coming soon!", Severity.Info);
    }

    private async Task GenerateCode()
    {
        // TODO: Implement code generation
        Snackbar.Add("Code generation functionality coming soon!", Severity.Info);
    }

    private async Task QueryField()
    {
        if (_selectedField != null)
        {
            Snackbar.Add($"Navigate to Query page with field: {_selectedField.Name}", Severity.Info);
        }
    }

    private async Task AnalyzeField()
    {
        if (_selectedField != null)
        {
            Snackbar.Add($"Navigate to Statistics page for field: {_selectedField.Name}", Severity.Info);
        }
    }

    private async Task CopyFieldPath()
    {
        if (_selectedField != null)
        {
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", _selectedField.Name);
            Snackbar.Add($"Field path copied: {_selectedField.Name}", Severity.Success);
        }
    }

    private string GetFieldIcon(Field field)
    {
        return field.DataType.ToLowerInvariant() switch
        {
            var t when t.Contains("string") || t.Contains("text") => Icons.Material.Filled.TextFields,
            var t when t.Contains("int") || t.Contains("number") || t.Contains("double") || t.Contains("float") => Icons.Material.Filled.Numbers,
            var t when t.Contains("bool") => Icons.Material.Filled.ToggleOn,
            var t when t.Contains("date") || t.Contains("time") => Icons.Material.Filled.DateRange,
            var t when t.Contains("array") || t.Contains("list") => Icons.Material.Filled.FormatListBulleted,
            var t when t.Contains("object") || t.Contains("struct") => Icons.Material.Filled.DataObject,
            var t when t.Contains("map") => Icons.Material.Filled.ViewModule,
            _ => Icons.Material.Filled.Label
        };
    }

    private Color GetFieldColor(Field field)
    {
        return field.DataType.ToLowerInvariant() switch
        {
            var t when t.Contains("string") || t.Contains("text") => Color.Primary,
            var t when t.Contains("int") || t.Contains("number") || t.Contains("double") || t.Contains("float") => Color.Info,
            var t when t.Contains("bool") => Color.Warning,
            var t when t.Contains("date") || t.Contains("time") => Color.Secondary,
            var t when t.Contains("array") || t.Contains("list") => Color.Success,
            _ => Color.Default
        };
    }

    private Color GetTypeColor(string dataType)
    {
        return dataType.ToLowerInvariant() switch
        {
            var t when t.Contains("string") || t.Contains("text") => Color.Primary,
            var t when t.Contains("int") || t.Contains("number") || t.Contains("double") || t.Contains("float") => Color.Info,
            var t when t.Contains("bool") => Color.Warning,
            var t when t.Contains("date") || t.Contains("time") => Color.Secondary,
            _ => Color.Default
        };
    }

    private string GetFileIcon(FileFormat format)
    {
        return format switch
        {
            FileFormat.Parquet => Icons.Material.Filled.TableChart,
            FileFormat.Delta => Icons.Material.Filled.ChangeHistory,
            FileFormat.CSV => Icons.Material.Filled.GridOn,
            FileFormat.JSON => Icons.Material.Filled.DataObject,
            _ => Icons.Material.Filled.InsertDriveFile
        };
    }

    private Color GetFormatColor(FileFormat format)
    {
        return format switch
        {
            FileFormat.Parquet => Color.Primary,
            FileFormat.Delta => Color.Success,
            FileFormat.CSV => Color.Info,
            FileFormat.JSON => Color.Warning,
            _ => Color.Default
        };
    }

    private class SchemaTreeItem
    {
        public string Text { get; set; } = "";
        public string Icon { get; set; } = "";
        public Color IconColor { get; set; } = Color.Default;
        public Field Field { get; set; } = null!;
        public int Level { get; set; }
        public bool IsExpanded { get; set; } = false;
        public HashSet<SchemaTreeItem>? TreeItems { get; set; }
    }

    private class FlatField
    {
        public Field Field { get; set; } = null!;
        public int Level { get; set; }
    }
}