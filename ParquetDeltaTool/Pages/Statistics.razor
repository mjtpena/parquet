@page "/statistics"
@page "/statistics/{FileId:guid}"
@inject IFileProcessor FileProcessor
@inject IStorageService StorageService
@inject ApplicationState AppState
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar

<PageTitle>Statistics Dashboard - Parquet & Delta Lake Tool</PageTitle>

<MudGrid>
    <!-- File Selection and Controls -->
    <MudItem xs="12">
        <MudPaper Class="pa-4" Elevation="2">
            <MudGrid AlignItems="Center.Center">
                <MudItem xs="12" md="6">
                    <MudSelect T="Guid?" @bind-Value="_selectedFileId" Label="Select File" Variant="Variant.Outlined" Margin="Margin.Dense">
                        @foreach (var file in _availableFiles)
                        {
                            <MudSelectItem Value="file.FileId">
                                <MudStack Row="true" AlignItems="AlignItems.Center">
                                    <MudIcon Icon="@GetFileIcon(file.Format)" Size="Size.Small" />
                                    <MudText>@file.FileName</MudText>
                                    <MudChip Size="Size.Small" Color="@GetFormatColor(file.Format)" Variant="Variant.Text">
                                        @file.Format
                                    </MudChip>
                                </MudStack>
                            </MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudButtonGroup Variant="Variant.Outlined" Size="Size.Small">
                        <MudButton StartIcon="Icons.Material.Filled.Refresh" OnClick="RefreshStatistics" Disabled="@_isLoading">
                            Refresh
                        </MudButton>
                        <MudButton StartIcon="Icons.Material.Filled.Assessment" OnClick="GenerateReport" Disabled="@(_fileStats == null)">
                            Generate Report
                        </MudButton>
                        <MudButton StartIcon="Icons.Material.Filled.Download" OnClick="ExportStatistics" Disabled="@(_fileStats == null)">
                            Export
                        </MudButton>
                    </MudButtonGroup>
                </MudItem>
            </MudGrid>
        </MudPaper>
    </MudItem>

    @if (_isLoading)
    {
        <MudItem xs="12">
            <MudPaper Class="pa-8" Elevation="1">
                <MudStack AlignItems="AlignItems.Center">
                    <MudProgressCircular Indeterminate="true" Size="Size.Large" />
                    <MudText Typo="Typo.h6">Computing statistics...</MudText>
                    <MudText Typo="Typo.body2" Color="Color.Secondary">
                        This may take a few moments for large files
                    </MudText>
                </MudStack>
            </MudPaper>
        </MudItem>
    }
    else if (_fileStats == null)
    {
        <MudItem xs="12">
            <MudPaper Class="pa-8" Elevation="1">
                <MudStack AlignItems="AlignItems.Center">
                    <MudIcon Icon="Icons.Material.Filled.BarChart" Size="Size.Large" Color="Color.Secondary" />
                    <MudText Typo="Typo.h5" Color="Color.Secondary">Select a file to view statistics</MudText>
                    <MudText Typo="Typo.body2" Color="Color.Secondary">
                        Choose a file from the dropdown above to see detailed statistics and data quality metrics
                    </MudText>
                </MudStack>
            </MudPaper>
        </MudItem>
    }
    else
    {
        <!-- Overview Cards -->
        <MudItem xs="12">
            <MudGrid>
                <MudItem xs="12" sm="6" md="3">
                    <MudPaper Class="pa-4" Elevation="1">
                        <MudStack AlignItems="AlignItems.Center">
                            <MudIcon Icon="Icons.Material.Filled.TableRows" Color="Color.Primary" Size="Size.Large" />
                            <MudText Typo="Typo.h4">@_fileStats.TotalRows.ToString("N0")</MudText>
                            <MudText Typo="Typo.body2" Color="Color.Secondary">Total Rows</MudText>
                        </MudStack>
                    </MudPaper>
                </MudItem>
                <MudItem xs="12" sm="6" md="3">
                    <MudPaper Class="pa-4" Elevation="1">
                        <MudStack AlignItems="AlignItems.Center">
                            <MudIcon Icon="Icons.Material.Filled.ViewColumn" Color="Color.Info" Size="Size.Large" />
                            <MudText Typo="Typo.h4">@_fileStats.TotalColumns</MudText>
                            <MudText Typo="Typo.body2" Color="Color.Secondary">Columns</MudText>
                        </MudStack>
                    </MudPaper>
                </MudItem>
                <MudItem xs="12" sm="6" md="3">
                    <MudPaper Class="pa-4" Elevation="1">
                        <MudStack AlignItems="AlignItems.Center">
                            <MudIcon Icon="Icons.Material.Filled.Memory" Color="Color.Success" Size="Size.Large" />
                            <MudText Typo="Typo.h4">@FormatBytes(_fileStats.FileSizeBytes)</MudText>
                            <MudText Typo="Typo.body2" Color="Color.Secondary">File Size</MudText>
                        </MudStack>
                    </MudPaper>
                </MudItem>
                <MudItem xs="12" sm="6" md="3">
                    <MudPaper Class="pa-4" Elevation="1">
                        <MudStack AlignItems="AlignItems.Center">
                            <MudIcon Icon="Icons.Material.Filled.Compress" Color="Color.Warning" Size="Size.Large" />
                            <MudText Typo="Typo.h4">@($"{_fileStats.CompressionRatio:F1}x")</MudText>
                            <MudText Typo="Typo.body2" Color="Color.Secondary">Compression</MudText>
                        </MudStack>
                    </MudPaper>
                </MudItem>
            </MudGrid>
        </MudItem>

        <!-- Data Quality Overview -->
        <MudItem xs="12" lg="6">
            <MudPaper Class="pa-4" Elevation="1">
                <MudText Typo="Typo.h6" GutterBottom="true">Data Quality Overview</MudText>
                
                <MudGrid>
                    <MudItem xs="6">
                        <MudStack AlignItems="AlignItems.Center" Class="pa-2">
                            <MudText Typo="Typo.h5" Color="Color.Success">@($"{_fileStats.DataQualityScore:F1}%")</MudText>
                            <MudText Typo="Typo.body2" Color="Color.Secondary">Quality Score</MudText>
                            <MudProgressCircular Value="@_fileStats.DataQualityScore" Color="Color.Success" Size="Size.Large" />
                        </MudStack>
                    </MudItem>
                    <MudItem xs="6">
                        <MudStack Spacing="2">
                            <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                                <MudText Typo="Typo.body2">Completeness</MudText>
                                <MudText Typo="Typo.body2" Color="Color.Secondary">@($"{_fileStats.CompletenessScore:F1}%")</MudText>
                            </MudStack>
                            <MudProgressLinear Value="@_fileStats.CompletenessScore" Color="Color.Info" />
                            
                            <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                                <MudText Typo="Typo.body2">Uniqueness</MudText>
                                <MudText Typo="Typo.body2" Color="Color.Secondary">@($"{_fileStats.UniquenessScore:F1}%")</MudText>
                            </MudStack>
                            <MudProgressLinear Value="@_fileStats.UniquenessScore" Color="Color.Success" />
                            
                            <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                                <MudText Typo="Typo.body2">Consistency</MudText>
                                <MudText Typo="Typo.body2" Color="Color.Secondary">@($"{_fileStats.ConsistencyScore:F1}%")</MudText>
                            </MudStack>
                            <MudProgressLinear Value="@_fileStats.ConsistencyScore" Color="Color.Warning" />
                        </MudStack>
                    </MudItem>
                </MudGrid>
            </MudPaper>
        </MudItem>

        <!-- Data Types Distribution -->
        <MudItem xs="12" lg="6">
            <MudPaper Class="pa-4" Elevation="1">
                <MudText Typo="Typo.h6" GutterBottom="true">Data Types Distribution</MudText>
                <div style="height: 300px;">
                    <canvas id="dataTypesChart"></canvas>
                </div>
            </MudPaper>
        </MudItem>

        <!-- Column Statistics -->
        <MudItem xs="12">
            <MudPaper Class="pa-4" Elevation="1">
                <MudText Typo="Typo.h6" GutterBottom="true">Column Statistics</MudText>
                
                <MudTable Items="@_fileStats.ColumnStatistics" 
                         Dense="true" 
                         Hover="true" 
                         Striped="true"
                         SortLabel="Sort By">
                    <HeaderContent>
                        <MudTh>
                            <MudTableSortLabel SortBy="new Func<ColumnStats, object>(x => x.ColumnName)">
                                Column Name
                            </MudTableSortLabel>
                        </MudTh>
                        <MudTh>
                            <MudTableSortLabel SortBy="new Func<ColumnStats, object>(x => x.DataType)">
                                Data Type
                            </MudTableSortLabel>
                        </MudTh>
                        <MudTh>
                            <MudTableSortLabel SortBy="new Func<ColumnStats, object>(x => x.NullPercentage)">
                                Null %
                            </MudTableSortLabel>
                        </MudTh>
                        <MudTh>
                            <MudTableSortLabel SortBy="new Func<ColumnStats, object>(x => x.UniqueValues)">
                                Unique Values
                            </MudTableSortLabel>
                        </MudTh>
                        <MudTh>Min Value</MudTh>
                        <MudTh>Max Value</MudTh>
                        <MudTh>Actions</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Column Name">
                            <MudStack Row="true" AlignItems="AlignItems.Center">
                                <MudIcon Icon="@GetColumnIcon(context.DataType)" Size="Size.Small" Color="@GetColumnColor(context.DataType)" />
                                <MudText>@context.ColumnName</MudText>
                            </MudStack>
                        </MudTd>
                        <MudTd DataLabel="Data Type">
                            <MudChip Size="Size.Small" Color="@GetColumnColor(context.DataType)" Variant="Variant.Text">
                                @context.DataType
                            </MudChip>
                        </MudTd>
                        <MudTd DataLabel="Null %">
                            <MudStack Row="true" AlignItems="AlignItems.Center">
                                <MudProgressLinear Value="@context.NullPercentage" 
                                                  Color="@GetQualityColor(context.NullPercentage)"
                                                  Style="width: 80px;" />
                                <MudText Typo="Typo.body2">@($"{context.NullPercentage:F1}%")</MudText>
                            </MudStack>
                        </MudTd>
                        <MudTd DataLabel="Unique Values">
                            @context.UniqueValues.ToString("N0")
                        </MudTd>
                        <MudTd DataLabel="Min Value">
                            <MudText Style="max-width: 100px; overflow: hidden; text-overflow: ellipsis;">
                                @(context.MinValue?.ToString() ?? "N/A")
                            </MudText>
                        </MudTd>
                        <MudTd DataLabel="Max Value">
                            <MudText Style="max-width: 100px; overflow: hidden; text-overflow: ellipsis;">
                                @(context.MaxValue?.ToString() ?? "N/A")
                            </MudText>
                        </MudTd>
                        <MudTd DataLabel="Actions">
                            <MudButtonGroup Size="Size.Small" Variant="Variant.Text">
                                <MudIconButton Icon="Icons.Material.Filled.Search" 
                                              Size="Size.Small" 
                                              OnClick="() => QueryColumn(context.ColumnName)" />
                                <MudIconButton Icon="Icons.Material.Filled.BarChart" 
                                              Size="Size.Small" 
                                              OnClick="() => AnalyzeColumn(context.ColumnName)" />
                            </MudButtonGroup>
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            </MudPaper>
        </MudItem>

        <!-- Performance Insights -->
        <MudItem xs="12" lg="6">
            <MudPaper Class="pa-4" Elevation="1">
                <MudText Typo="Typo.h6" GutterBottom="true">Performance Insights</MudText>
                
                <MudList Dense="true">
                    @foreach (var insight in _fileStats.PerformanceInsights)
                    {
                        <MudListItem>
                            <MudStack Row="true" AlignItems="AlignItems.Start">
                                <MudIcon Icon="@GetInsightIcon(insight.Type)" 
                                        Color="@GetInsightColor(insight.Type)" 
                                        Size="Size.Small" />
                                <div>
                                    <MudText Typo="Typo.body2">@insight.Title</MudText>
                                    <MudText Typo="Typo.caption" Color="Color.Secondary">@insight.Description</MudText>
                                    @if (!string.IsNullOrEmpty(insight.Recommendation))
                                    {
                                        <MudText Typo="Typo.caption" Color="Color.Primary">💡 @insight.Recommendation</MudText>
                                    }
                                </div>
                            </MudStack>
                        </MudListItem>
                    }
                </MudList>
            </MudPaper>
        </MudItem>

        <!-- Data Quality Issues -->
        <MudItem xs="12" lg="6">
            <MudPaper Class="pa-4" Elevation="1">
                <MudText Typo="Typo.h6" GutterBottom="true">Data Quality Issues</MudText>
                
                @if (_fileStats.DataQualityIssues.Any())
                {
                    <MudList Dense="true">
                        @foreach (var issue in _fileStats.DataQualityIssues.Take(10))
                        {
                            <MudListItem>
                                <MudStack Row="true" AlignItems="AlignItems.Start">
                                    <MudIcon Icon="@GetIssueIcon(issue.Severity)" 
                                            Color="@GetIssueColor(issue.Severity)" 
                                            Size="Size.Small" />
                                    <div>
                                        <MudText Typo="Typo.body2">@issue.Title</MudText>
                                        <MudText Typo="Typo.caption" Color="Color.Secondary">@issue.Description</MudText>
                                        <MudChip Size="Size.Small" Color="@GetIssueColor(issue.Severity)" Variant="Variant.Text">
                                            @issue.Severity
                                        </MudChip>
                                    </div>
                                </MudStack>
                            </MudListItem>
                        }
                    </MudList>
                    
                    @if (_fileStats.DataQualityIssues.Count > 10)
                    {
                        <MudText Typo="Typo.caption" Color="Color.Secondary" Class="mt-2">
                            And @(_fileStats.DataQualityIssues.Count - 10) more issues...
                        </MudText>
                    }
                }
                else
                {
                    <MudStack AlignItems="AlignItems.Center" Class="pa-4">
                        <MudIcon Icon="Icons.Material.Filled.CheckCircle" Color="Color.Success" Size="Size.Large" />
                        <MudText Color="Color.Success">No data quality issues found!</MudText>
                    </MudStack>
                }
            </MudPaper>
        </MudItem>
    }
</MudGrid>

@code {
    [Parameter] public Guid? FileId { get; set; }

    private List<FileMetadata> _availableFiles = new();
    private Guid? _selectedFileId;
    private FileStatistics? _fileStats;
    private bool _isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadAvailableFiles();
        
        if (FileId.HasValue)
        {
            _selectedFileId = FileId.Value;
            await LoadStatistics();
        }
        else if (AppState.ActiveFile != null)
        {
            _selectedFileId = AppState.ActiveFile.Metadata.FileId;
            await LoadStatistics();
        }
    }

    private async Task LoadAvailableFiles()
    {
        try
        {
            _availableFiles = await StorageService.GetRecentFilesAsync();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to load files: {ex.Message}", Severity.Error);
        }
    }

    private async Task LoadStatistics()
    {
        if (_selectedFileId == null) return;

        _isLoading = true;
        StateHasChanged();

        try
        {
            // Generate mock statistics for demonstration
            await GenerateMockStatistics();
            
            // TODO: Replace with real statistics computation
            // _fileStats = await FileProcessor.GetStatisticsAsync(_selectedFileId.Value);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to load statistics: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    private async Task GenerateMockStatistics()
    {
        await Task.Delay(1000); // Simulate processing time
        
        var metadata = await StorageService.GetMetadataAsync(_selectedFileId!.Value);
        if (metadata == null) return;

        _fileStats = new FileStatistics
        {
            FileName = metadata.FileName,
            TotalRows = Random.Shared.Next(10000, 1000000),
            TotalColumns = Random.Shared.Next(5, 50),
            FileSizeBytes = metadata.FileSize,
            CompressionRatio = Random.Shared.NextDouble() * 5 + 1,
            DataQualityScore = Random.Shared.NextDouble() * 20 + 80,
            CompletenessScore = Random.Shared.NextDouble() * 15 + 85,
            UniquenessScore = Random.Shared.NextDouble() * 25 + 75,
            ConsistencyScore = Random.Shared.NextDouble() * 10 + 90
        };

        // Generate column statistics
        var columnTypes = new[] { "string", "int64", "double", "boolean", "date", "timestamp" };
        for (int i = 0; i < _fileStats.TotalColumns; i++)
        {
            var dataType = columnTypes[Random.Shared.Next(columnTypes.Length)];
            _fileStats.ColumnStatistics.Add(new ColumnStats
            {
                ColumnName = $"column_{i + 1}",
                DataType = dataType,
                NullPercentage = Random.Shared.NextDouble() * 20,
                UniqueValues = Random.Shared.Next(1, (int)_fileStats.TotalRows),
                MinValue = GenerateMinValue(dataType),
                MaxValue = GenerateMaxValue(dataType)
            });
        }

        // Generate performance insights
        _fileStats.PerformanceInsights.AddRange(new[]
        {
            new PerformanceInsight
            {
                Type = InsightType.Optimization,
                Title = "Large File Detected",
                Description = $"File size is {FormatBytes(_fileStats.FileSizeBytes)}. Consider partitioning for better query performance.",
                Recommendation = "Split into smaller files or use columnar partitioning"
            },
            new PerformanceInsight
            {
                Type = InsightType.Compression,
                Title = "Good Compression Ratio",
                Description = $"Compression ratio of {_fileStats.CompressionRatio:F1}x is efficient.",
                Recommendation = null
            },
            new PerformanceInsight
            {
                Type = InsightType.Schema,
                Title = "Schema Complexity",
                Description = $"Schema has {_fileStats.TotalColumns} columns. Consider normalizing if needed.",
                Recommendation = "Review column usage and consider removing unused columns"
            }
        });

        // Generate data quality issues
        if (_fileStats.DataQualityScore < 95)
        {
            _fileStats.DataQualityIssues.AddRange(new[]
            {
                new DataQualityIssue
                {
                    Severity = IssueSeverity.Warning,
                    Title = "High Null Values",
                    Description = "Some columns have high percentage of null values"
                },
                new DataQualityIssue
                {
                    Severity = IssueSeverity.Info,
                    Title = "Data Type Inconsistency",
                    Description = "Numeric data stored as strings in some columns"
                }
            });
        }
    }

    private async Task RefreshStatistics()
    {
        await LoadStatistics();
    }

    private async Task GenerateReport()
    {
        Snackbar.Add("Report generation functionality coming soon!", Severity.Info);
    }

    private async Task ExportStatistics()
    {
        Snackbar.Add("Statistics export functionality coming soon!", Severity.Info);
    }

    private void QueryColumn(string columnName)
    {
        Snackbar.Add($"Navigate to Query page for column: {columnName}", Severity.Info);
    }

    private void AnalyzeColumn(string columnName)
    {
        Snackbar.Add($"Detailed analysis for column: {columnName}", Severity.Info);
    }

    private object GenerateMinValue(string dataType)
    {
        return dataType switch
        {
            "int64" => Random.Shared.Next(1, 100),
            "double" => Math.Round(Random.Shared.NextDouble() * 100, 2),
            "string" => "A",
            "date" => "2020-01-01",
            "boolean" => false,
            _ => "N/A"
        };
    }

    private object GenerateMaxValue(string dataType)
    {
        return dataType switch
        {
            "int64" => Random.Shared.Next(1000, 100000),
            "double" => Math.Round(Random.Shared.NextDouble() * 10000, 2),
            "string" => "ZZZZ",
            "date" => "2024-12-31",
            "boolean" => true,
            _ => "N/A"
        };
    }

    private string GetColumnIcon(string dataType)
    {
        return dataType.ToLowerInvariant() switch
        {
            var t when t.Contains("string") => Icons.Material.Filled.TextFields,
            var t when t.Contains("int") || t.Contains("double") => Icons.Material.Filled.Numbers,
            var t when t.Contains("bool") => Icons.Material.Filled.ToggleOn,
            var t when t.Contains("date") => Icons.Material.Filled.DateRange,
            _ => Icons.Material.Filled.Label
        };
    }

    private Color GetColumnColor(string dataType)
    {
        return dataType.ToLowerInvariant() switch
        {
            var t when t.Contains("string") => Color.Primary,
            var t when t.Contains("int") || t.Contains("double") => Color.Info,
            var t when t.Contains("bool") => Color.Warning,
            var t when t.Contains("date") => Color.Secondary,
            _ => Color.Default
        };
    }

    private Color GetQualityColor(double percentage)
    {
        return percentage switch
        {
            >= 90 => Color.Success,
            >= 75 => Color.Warning,
            _ => Color.Error
        };
    }

    private string GetInsightIcon(InsightType type)
    {
        return type switch
        {
            InsightType.Optimization => Icons.Material.Filled.Speed,
            InsightType.Compression => Icons.Material.Filled.Compress,
            InsightType.Schema => Icons.Material.Filled.Schema,
            InsightType.Performance => Icons.Material.Filled.TrendingUp,
            _ => Icons.Material.Filled.Info
        };
    }

    private Color GetInsightColor(InsightType type)
    {
        return type switch
        {
            InsightType.Optimization => Color.Warning,
            InsightType.Compression => Color.Success,
            InsightType.Schema => Color.Info,
            InsightType.Performance => Color.Primary,
            _ => Color.Default
        };
    }

    private string GetIssueIcon(IssueSeverity severity)
    {
        return severity switch
        {
            IssueSeverity.Critical => Icons.Material.Filled.Error,
            IssueSeverity.Warning => Icons.Material.Filled.Warning,
            IssueSeverity.Info => Icons.Material.Filled.Info,
            _ => Icons.Material.Filled.HelpOutline
        };
    }

    private Color GetIssueColor(IssueSeverity severity)
    {
        return severity switch
        {
            IssueSeverity.Critical => Color.Error,
            IssueSeverity.Warning => Color.Warning,
            IssueSeverity.Info => Color.Info,
            _ => Color.Default
        };
    }

    private string GetFileIcon(FileFormat format)
    {
        return format switch
        {
            FileFormat.Parquet => Icons.Material.Filled.TableChart,
            FileFormat.Delta => Icons.Material.Filled.ChangeHistory,
            FileFormat.CSV => Icons.Material.Filled.GridOn,
            FileFormat.JSON => Icons.Material.Filled.DataObject,
            _ => Icons.Material.Filled.InsertDriveFile
        };
    }

    private Color GetFormatColor(FileFormat format)
    {
        return format switch
        {
            FileFormat.Parquet => Color.Primary,
            FileFormat.Delta => Color.Success,
            FileFormat.CSV => Color.Info,
            FileFormat.JSON => Color.Warning,
            _ => Color.Default
        };
    }

    private string FormatBytes(long bytes)
    {
        string[] suffixes = { "B", "KB", "MB", "GB", "TB" };
        int counter = 0;
        double number = bytes;
        
        while (Math.Round(number / 1024) >= 1)
        {
            number = number / 1024;
            counter++;
        }
        
        return $"{number:n1} {suffixes[counter]}";
    }

    // Statistics Models
    private class FileStatistics
    {
        public string FileName { get; set; } = "";
        public long TotalRows { get; set; }
        public int TotalColumns { get; set; }
        public long FileSizeBytes { get; set; }
        public double CompressionRatio { get; set; }
        public double DataQualityScore { get; set; }
        public double CompletenessScore { get; set; }
        public double UniquenessScore { get; set; }
        public double ConsistencyScore { get; set; }
        public List<ColumnStatsInfo> ColumnStatistics { get; set; } = new();
        public List<PerformanceInsightInfo> PerformanceInsights { get; set; } = new();
        public List<DataQualityIssueInfo> DataQualityIssues { get; set; } = new();
    }

    private class ColumnStatsInfo
    {
        public string ColumnName { get; set; } = "";
        public string DataType { get; set; } = "";
        public double NullPercentage { get; set; }
        public long UniqueValues { get; set; }
        public object? MinValue { get; set; }
        public object? MaxValue { get; set; }
    }

    private class PerformanceInsightInfo
    {
        public InsightType Type { get; set; }
        public string Title { get; set; } = "";
        public string Description { get; set; } = "";
        public string? Recommendation { get; set; }
    }

    private class DataQualityIssueInfo
    {
        public IssueSeverity Severity { get; set; }
        public string Title { get; set; } = "";
        public string Description { get; set; } = "";
    }

    private enum InsightType
    {
        Optimization,
        Compression,
        Schema,
        Performance
    }

    private enum IssueSeverity
    {
        Info,
        Warning,
        Critical
    }
}