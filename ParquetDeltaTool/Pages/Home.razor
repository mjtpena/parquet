@page "/"
@inject IFileProcessor FileProcessor
@inject IStorageService StorageService
@inject ApplicationState AppState

<PageTitle>Parquet & Delta Lake Tool</PageTitle>

<div class="home-page">
    <!-- Hero Section -->
    <section class="hero-section">
        <div class="hero-background">
            <div class="hero-gradient"></div>
            <div class="hero-patterns"></div>
        </div>
        <div class="hero-content container">
            <div class="hero-main">
                <div class="hero-icon">
                    <MudIcon Icon="Icons.Material.Filled.Storage" Size="Size.Large" />
                </div>
                <h1 class="hero-title typography-h1">
                    <span class="typography-parquet">Parquet</span>
                    <span class="typography-muted">&</span>
                    <span class="typography-delta">Delta</span>
                    <span class="hero-subtitle">Tool</span>
                </h1>
                <p class="hero-lead typography-lead">
                    Next-generation data engineering toolkit powered by WebAssembly
                </p>
                <p class="hero-description typography-body-large">
                    Process Parquet files and Delta Lake tables entirely in your browser.
                    <br class="desktop-only" />
                    Zero server dependencies • Complete privacy • Lightning fast performance
                </p>
                <div class="hero-features">
                    <div class="feature-chip privacy">
                        <MudIcon Icon="Icons.Material.Filled.Security" Size="Size.Small" />
                        <span>Privacy-First</span>
                    </div>
                    <div class="feature-chip performance">
                        <MudIcon Icon="Icons.Material.Filled.Speed" Size="Size.Small" />
                        <span>WASM Powered</span>
                    </div>
                    <div class="feature-chip offline">
                        <MudIcon Icon="Icons.Material.Filled.CloudOff" Size="Size.Small" />
                        <span>Offline Capable</span>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <!-- Features Grid -->
    <section class="features-section container">
        <div class="section-header">
            <h2 class="typography-h2">Powerful Features</h2>
            <p class="typography-body-large typography-muted">Everything you need for modern data processing</p>
        </div>
        <div class="grid md:grid-cols-3 gap-6">
            <!-- Data Processing Features -->
            <div class="feature-card primary-card">
                <div class="feature-card-header">
                    <div class="feature-icon primary-icon">
                        <MudIcon Icon="Icons.Material.Filled.DataUsage" Size="Size.Large" />
                    </div>
                    <h3 class="typography-h4 typography-primary">Data Processing</h3>
                </div>
                <p class="feature-description typography-body-regular">
                    Comprehensive suite for analyzing, querying, and transforming your data files with enterprise-grade performance.
                </p>
                <div class="feature-list">
                    <div class="feature-item">
                        <MudIcon Icon="Icons.Material.Filled.GridView" Size="Size.Small" />
                        <span class="typography-body-small">Interactive Data Viewer</span>
                        <span class="status-chip warning">Soon</span>
                    </div>
                    <div class="feature-item">
                        <MudIcon Icon="Icons.Material.Filled.Code" Size="Size.Small" />
                        <span class="typography-body-small">SQL Query Engine</span>
                        <span class="status-chip warning">Soon</span>
                    </div>
                    <div class="feature-item">
                        <MudIcon Icon="Icons.Material.Filled.Analytics" Size="Size.Small" />
                        <span class="typography-body-small">Statistics Dashboard</span>
                        <span class="status-chip warning">Soon</span>
                    </div>
                </div>
            </div>

            <!-- Delta Lake Features -->
            <div class="feature-card delta-card">
                <div class="feature-card-header">
                    <div class="feature-icon delta-icon">
                        <MudIcon Icon="Icons.Material.Filled.ChangeHistory" Size="Size.Large" />
                    </div>
                    <h3 class="typography-h4 typography-delta">Delta Lake</h3>
                </div>
                <p class="feature-description typography-body-regular">
                    Advanced Delta Lake operations including time travel, ACID transactions, and table optimization.
                </p>
                <div class="feature-list">
                    <div class="feature-item">
                        <MudIcon Icon="Icons.Material.Filled.Timeline" Size="Size.Small" />
                        <span class="typography-body-small">Version History</span>
                        <span class="status-chip success">Ready</span>
                    </div>
                    <div class="feature-item">
                        <MudIcon Icon="Icons.Material.Filled.Speed" Size="Size.Small" />
                        <span class="typography-body-small">Table Optimization</span>
                        <span class="status-chip success">Ready</span>
                    </div>
                    <div class="feature-item">
                        <MudIcon Icon="Icons.Material.Filled.CleaningServices" Size="Size.Small" />
                        <span class="typography-body-small">Vacuum Operations</span>
                        <span class="status-chip success">Ready</span>
                    </div>
                </div>
            </div>

            <!-- Developer Tools -->
            <div class="feature-card tools-card">
                <div class="feature-card-header">
                    <div class="feature-icon tools-icon">
                        <MudIcon Icon="Icons.Material.Filled.Build" Size="Size.Large" />
                    </div>
                    <h3 class="typography-h4 typography-json">Developer Tools</h3>
                </div>
                <p class="feature-description typography-body-regular">
                    Essential utilities for data engineers and developers working with modern data formats.
                </p>
                <div class="feature-list">
                    <div class="feature-item">
                        <MudIcon Icon="Icons.Material.Filled.SwapHoriz" Size="Size.Small" />
                        <span class="typography-body-small">Format Converter</span>
                        <span class="status-chip success">Ready</span>
                    </div>
                    <div class="feature-item">
                        <MudIcon Icon="Icons.Material.Filled.AccountTree" Size="Size.Small" />
                        <span class="typography-body-small">Schema Explorer</span>
                        <span class="status-chip warning">Soon</span>
                    </div>
                    <div class="feature-item">
                        <MudIcon Icon="Icons.Material.Filled.VerifiedUser" Size="Size.Small" />
                        <span class="typography-body-small">Data Validator</span>
                        <span class="status-chip warning">Soon</span>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <!-- File Upload Section -->
    <section class="upload-section container">
        <div class="section-header">
            <div class="upload-icon">
                <MudIcon Icon="Icons.Material.Filled.CloudUpload" Size="Size.Large" />
            </div>
            <h2 class="typography-h2">Get Started</h2>
            <p class="typography-body-large typography-muted">
                Drop your Parquet files, Delta tables, or CSV data to begin analysis
            </p>
        </div>
        <div class="upload-container">
            <FileUploadComponent OnFileUploaded="HandleFileUploaded" />
        </div>
    </section>

    <!-- Recent Files & Quick Actions -->
    @if (_recentFiles.Any())
    {
        <section class="content-section container">
            <div class="grid lg:grid-cols-4 gap-6">
                <div class="lg:col-span-3">
                    <div class="data-card">
                        <div class="card-header">
                            <div class="card-icon">
                                <MudIcon Icon="Icons.Material.Filled.History" Size="Size.Medium" />
                            </div>
                            <h3 class="typography-h4">Recent Files</h3>
                        </div>
                        <div class="data-table-responsive">
                            <table class="data-table-enhanced">
                                <thead>
                                    <tr>
                                        <th class="sortable">Name</th>
                                        <th class="sortable">Format</th>
                                        <th class="sortable">Size</th>
                                        <th class="sortable">Modified</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var file in _recentFiles)
                                    {
                                        <tr>
                                            <td>
                                                <div class="flex items-center gap-2">
                                                    <MudIcon Icon="@GetFileIcon(file.Format)" Size="Size.Small" />
                                                    <span class="typography-data-number">@file.FileName</span>
                                                </div>
                                            </td>
                                            <td>
                                                <span class="format-badge @file.Format.ToString().ToLower()">
                                                    @file.Format
                                                </span>
                                            </td>
                                            <td class="cell-number">@FormatFileSize(file.FileSize)</td>
                                            <td class="cell-date">@file.ModifiedAt.ToString("MMM dd, HH:mm")</td>
                                            <td>
                                                <div class="flex gap-2">
                                                    <button class="action-button" @onclick="() => OpenFile(file)" title="View file">
                                                        <MudIcon Icon="Icons.Material.Filled.Visibility" Size="Size.Small" />
                                                    </button>
                                                    <button class="action-button delete" @onclick="() => DeleteFile(file.FileId)" title="Delete file">
                                                        <MudIcon Icon="Icons.Material.Filled.Delete" Size="Size.Small" />
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>

                <div class="flex flex-col gap-6">
                    <!-- Quick Actions -->
                    <div class="quick-actions-card">
                        <div class="card-header">
                            <div class="card-icon">
                                <MudIcon Icon="Icons.Material.Filled.Bolt" Size="Size.Medium" />
                            </div>
                            <h3 class="typography-h5">Quick Actions</h3>
                        </div>
                        <div class="quick-actions-list">
                            <MudButton Href="/viewer" 
                                      StartIcon="Icons.Material.Filled.GridView" 
                                      Variant="Variant.Outlined" 
                                      Color="Color.Primary"
                                      FullWidth="true"
                                      Class="quick-action-button">
                                Data Viewer
                            </MudButton>
                            <MudButton Href="/query" 
                                      StartIcon="Icons.Material.Filled.Code" 
                                      Variant="Variant.Outlined" 
                                      Color="Color.Primary"
                                      FullWidth="true"
                                      Class="quick-action-button">
                                SQL Query
                            </MudButton>
                            <MudButton Href="/converter" 
                                      StartIcon="Icons.Material.Filled.SwapHoriz" 
                                      Variant="Variant.Filled" 
                                      Color="Color.Primary"
                                      FullWidth="true"
                                      Class="quick-action-button primary">
                                Format Converter
                            </MudButton>
                            <MudButton Href="/delta/history" 
                                      StartIcon="Icons.Material.Filled.Timeline" 
                                      Variant="Variant.Outlined" 
                                      Color="Color.Success"
                                      FullWidth="true"
                                      Class="quick-action-button">
                                Delta History
                            </MudButton>
                        </div>
                    </div>

                    <!-- Storage Usage -->
                    <div class="storage-card">
                        <div class="card-header">
                            <div class="card-icon storage-icon">
                                <MudIcon Icon="Icons.Material.Filled.Storage" Size="Size.Medium" />
                            </div>
                            <h3 class="typography-h6">Storage Usage</h3>
                        </div>
                        <div class="storage-content">
                            <div class="storage-progress">
                                <div class="progress-bar">
                                    <div class="progress-fill" style="width: @(_storageUsagePercent)%"></div>
                                </div>
                            </div>
                            <div class="storage-info">
                                <span class="typography-data-number">@FormatFileSize(_storageUsed)</span>
                                <span class="typography-caption typography-muted">of @FormatFileSize(_storageTotal)</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </section>
    }
    else
    {
        <!-- Developer Documentation -->
        <section class="developer-section container">
            <div class="section-header">
                <h2 class="typography-h2">For Developers</h2>
                <p class="typography-body-large typography-muted">Built with modern web technologies for maximum performance</p>
            </div>
            <div class="grid md:grid-cols-2 gap-6">
                <MudPaper Class="pa-6" Elevation="2" Style="border-radius: 12px;">
                    <MudStack Spacing="3">
                        <MudStack Row AlignItems="AlignItems.Center" Spacing="2">
                            <MudIcon Icon="Icons.Material.Filled.Code" Color="Color.Primary" Size="Size.Medium" />
                            <MudText Typo="Typo.h5" Class="font-semibold">For Developers</MudText>
                        </MudStack>
                        
                        <MudText Typo="Typo.body2" Color="Color.Secondary">
                            Built with modern web technologies for maximum performance and developer experience.
                        </MudText>
                        
                        <MudStack Spacing="2">
                            <MudAlert Severity="Severity.Info" Dense="true" Class="rounded-lg">
                                <strong>WebAssembly Integration:</strong> DuckDB and Arrow for high-performance data processing
                            </MudAlert>
                            <MudAlert Severity="Severity.Success" Dense="true" Class="rounded-lg">
                                <strong>Privacy First:</strong> All processing happens locally in your browser
                            </MudAlert>
                            <MudAlert Severity="Severity.Warning" Dense="true" Class="rounded-lg">
                                <strong>Progressive Web App:</strong> Install and use offline capabilities
                            </MudAlert>
                        </MudStack>
                    </MudStack>
                </MudPaper>

                <MudPaper Class="pa-6" Elevation="2" Style="border-radius: 12px;">
                    <MudStack Spacing="3">
                        <MudStack Row AlignItems="AlignItems.Center" Spacing="2">
                            <MudIcon Icon="Icons.Material.Filled.GitHub" Color="Color.Dark" Size="Size.Medium" />
                            <MudText Typo="Typo.h5" Class="font-semibold">Open Source</MudText>
                        </MudStack>
                        
                        <MudText Typo="Typo.body2" Color="Color.Secondary">
                            Explore the source code, contribute, or customize for your needs.
                        </MudText>
                        
                        <MudStack Spacing="2">
                            <MudButton Href="https://github.com/mjtpena/parquet" 
                                      Target="_blank"
                                      StartIcon="Icons.Custom.Brands.GitHub"
                                      Variant="Variant.Outlined"
                                      Color="Color.Dark"
                                      FullWidth="true">
                                View on GitHub
                            </MudButton>
                            <MudStack Row Justify="Justify.SpaceBetween">
                                <MudChip Icon="Icons.Material.Filled.Star" Size="Size.Small">
                                    MIT License
                                </MudChip>
                                <MudChip Icon="Icons.Material.Filled.Code" Size="Size.Small" Color="Color.Primary">
                                    Blazor + WASM
                                </MudChip>
                            </MudStack>
                        </MudStack>
                    </MudStack>
                </MudPaper>
            </div>
        </section>
    }
</div>

@code {
    private List<FileMetadata> _recentFiles = new();
    private long _storageUsed = 0;
    private long _storageTotal = 1024 * 1024 * 1024; // 1GB default
    private double _storageUsagePercent = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadRecentFiles();
        await UpdateStorageInfo();
    }

    private async Task LoadRecentFiles()
    {
        try
        {
            _recentFiles = await StorageService.GetRecentFilesAsync(10);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            // TODO: Show error message
            Console.WriteLine($"Failed to load recent files: {ex.Message}");
        }
    }

    private async Task UpdateStorageInfo()
    {
        try
        {
            _storageUsed = await StorageService.GetStorageUsageAsync();
            _storageUsagePercent = Math.Round((_storageUsed / (double)_storageTotal) * 100, 1);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to get storage info: {ex.Message}");
        }
    }

    private async Task HandleFileUploaded(FileMetadata metadata)
    {
        AppState.OpenFile(metadata);
        await LoadRecentFiles();
        await UpdateStorageInfo();
    }

    private void OpenFile(FileMetadata metadata)
    {
        AppState.OpenFile(metadata);
        // Navigate to viewer
        // TODO: Add navigation service
    }

    private async Task DeleteFile(Guid fileId)
    {
        try
        {
            await StorageService.DeleteFileAsync(fileId);
            await LoadRecentFiles();
            await UpdateStorageInfo();
        }
        catch (Exception ex)
        {
            // TODO: Show error message
            Console.WriteLine($"Failed to delete file: {ex.Message}");
        }
    }

    private string GetFileIcon(FileFormat format)
    {
        return format switch
        {
            FileFormat.Parquet => Icons.Material.Filled.TableChart,
            FileFormat.Delta => Icons.Material.Filled.ChangeHistory,
            FileFormat.CSV => Icons.Material.Filled.GridOn,
            FileFormat.JSON => Icons.Material.Filled.DataObject,
            _ => Icons.Material.Filled.InsertDriveFile
        };
    }

    private Color GetFormatColor(FileFormat format)
    {
        return format switch
        {
            FileFormat.Parquet => Color.Primary,
            FileFormat.Delta => Color.Success,
            FileFormat.CSV => Color.Info,
            FileFormat.JSON => Color.Warning,
            _ => Color.Default
        };
    }

    private string FormatFileSize(long bytes)
    {
        string[] suffixes = { "B", "KB", "MB", "GB", "TB" };
        int counter = 0;
        double number = bytes;
        
        while (Math.Round(number / 1024) >= 1)
        {
            number = number / 1024;
            counter++;
        }
        
        return $"{number:n1} {suffixes[counter]}";
    }
}